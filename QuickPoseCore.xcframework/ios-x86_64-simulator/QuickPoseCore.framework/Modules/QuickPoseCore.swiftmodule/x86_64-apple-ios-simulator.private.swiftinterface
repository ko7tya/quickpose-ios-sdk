// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QuickPoseCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CoreGraphics
import Foundation
import QuickPoseMP
import Swift
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers public class QuickPose : ObjectiveC.NSObject, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc override dynamic public init()
  public func start(features: [QuickPoseCore.QuickPose.Feature], onStart: (() -> ())? = nil, onFrame: @escaping ((QuickPoseCore.QuickPose.Status, UIKit.UIImage?, [QuickPoseCore.QuickPose.Feature : QuickPoseCore.QuickPose.FeatureResult], QuickPoseCore.QuickPose.Landmarks?) -> ()))
  public func update(features: [QuickPoseCore.QuickPose.Feature])
  public func stop()
  public func libVersion() -> Swift.String
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @objc deinit
}
extension QuickPoseCore.QuickPose {
  public enum Feature : Swift.Hashable {
    case overlay(QuickPoseCore.QuickPose.Landmarks.Group)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: QuickPoseCore.QuickPose.Feature, b: QuickPoseCore.QuickPose.Feature) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum FeatureResult {
    case reading(Swift.Double, Swift.String)
  }
  public enum Status {
    case success(fps: Swift.Int)
    case noPersonFound
  }
  public struct Landmarks {
    public enum Group : Swift.String {
      case none
      case wholeBody
      case upperBody
      case straightArmsUpperBody
      case toWristsUpperBody
      case shoulders
      case userLeftArm
      case userLeftArmToWrist
      case userLeftArmNoElbow
      case userStraightLeftArm
      case userLeftHand
      case userRightArm
      case userRightArmToWrist
      case userRightArmNoElbow
      case userStraightRightArm
      case userRightHand
      case lowerBody
      case hips
      case userRightLeg
      case userLeftLeg
      public static func commonLimbs() -> [QuickPoseCore.QuickPose.Landmarks.Group]
      public static func allLimbs() -> [QuickPoseCore.QuickPose.Landmarks.Group]
      public func toJoints() -> [[QuickPoseCore.QuickPose.Landmarks.Body]]
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Face : Swift.Int {
      case userFaceForehead
      case userFaceChin
      case userFaceLeftEar
      case userFaceRightEar
      case userFaceNose
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Face?
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Body : Swift.Int {
      case nose
      case userLeftEyeInner
      case userLeftEye
      case userLeftEyeOuter
      case userRightEyeInner
      case userRightEye
      case userRightEyeOuter
      case userLeftEar
      case userRightEar
      case mouthuserRight
      case mouthuserLeft
      case userLeftShoulder
      case userRightShoulder
      case userLeftElbow
      case userRightElbow
      case userLeftWrist
      case userRightWrist
      case userLeftPinky
      case userRightPinky
      case userLeftIndex
      case userRightIndex
      case userLeftThumb
      case userRightThumb
      case userLeftHip
      case userRightHip
      case userLeftKnee
      case userRightKnee
      case userLeftAnkle
      case userRightAnkle
      case userLeftHeel
      case userRightHeel
      case userLeftFootIndex
      case userRightFootIndex
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Body?
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum HandGroup : Swift.Int {
      case none
      case hand
      case fingers
      public static func parse(_ rawValue: Swift.String?) -> QuickPoseCore.QuickPose.Landmarks.HandGroup
      public func toJoints() -> [[QuickPoseCore.QuickPose.Landmarks.Hand]]
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Hand : Swift.Int {
      case WRIST
      case THUMB_CMC
      case THUMB_MCP
      case THUMB_IP
      case THUMB_TIP
      case INDEX_FINGER_MCP
      case INDEX_FINGER_PIP
      case INDEX_FINGER_DIP
      case INDEX_FINGER_TIP
      case MIDDLE_FINGER_MCP
      case MIDDLE_FINGER_PIP
      case MIDDLE_FINGER_DIP
      case MIDDLE_FINGER_TIP
      case RING_FINGER_MCP
      case RING_FINGER_PIP
      case RING_FINGER_DIP
      case RING_FINGER_TIP
      case PINKY_FINGER_MCP
      case PINKY_FINGER_PIP
      case PINKY_FINGER_DIP
      case PINKY_FINGER_TIP
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Hand?
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
  }
}
extension CoreFoundation.CGPoint : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGPoint {
  public func Yflipped() -> CoreFoundation.CGPoint
}
extension QuickPoseCore.QuickPose.Landmarks.Group : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Group : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Group : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.Body : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Body : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Body : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.RawRepresentable {}
