// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QuickPoseCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CoreGraphics
import CoreML
import Foundation
import QuickPoseMP
import Swift
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _StringProcessing
public class QuickPoseThresholdCounter {
  public enum CountState {
    case poseEntered(_: Swift.Int)
    case poseComplete(_: Swift.Int)
  }
  final public let enterThreshold: Swift.Double
  final public let exitThreshold: Swift.Double
  public init(enterThreshold: Swift.Double = 0.6, exitThreshold: Swift.Double = 0.3)
  public func count(probability: Swift.Double, onChange: ((QuickPoseCore.QuickPoseThresholdCounter.CountState) -> ())? = nil)
  public func getCount() -> Swift.Int
  public func getState() -> QuickPoseCore.QuickPoseThresholdCounter.CountState
  public func reset()
  public func setCount(_ newCount: Swift.Int)
  @objc deinit
}
public class QuickPoseClassifierSmoother {
  public init(windowSize: Swift.Int = 10, alpha: Swift.Double = 0.9)
  public func smooth(probs: [Swift.Double]) -> [Swift.Double]
  @objc deinit
}
public enum BodyPose {
  case standFacing
  case standSideOn
  case floorFacing
  case floorSideOnWithBackOffTheGround
  case floorSideOnWithBackOnTheGround
  public static func == (a: QuickPoseCore.BodyPose, b: QuickPoseCore.BodyPose) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BodyFeedback : Swift.String {
  case standFacing
  case standSideOn
  case standFacingOrSide
  case floorFacing
  case floorSideOnWithBackOffTheGround
  case floorWithBackOffTheGround
  case floorSideOnWithBackOnTheGround
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PoseFeedback {
  public enum ActionChange : Swift.String {
    case move
    case lean
    case straighten
    case lower
    case place
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DirectionChange : Swift.String {
    case up
    case down
    case forward
    case back
    case apart
    case intoView
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  case body(feedback: QuickPoseCore.BodyFeedback, isRequired: Swift.Bool)
  case group(action: QuickPoseCore.PoseFeedback.ActionChange, group: QuickPoseCore.QuickPose.Landmarks.Group, direction: QuickPoseCore.PoseFeedback.DirectionChange?, isRequired: Swift.Bool)
  case joint(action: QuickPoseCore.PoseFeedback.ActionChange, joint: QuickPoseCore.QuickPose.Landmarks.Body, direction: QuickPoseCore.PoseFeedback.DirectionChange?, isRequired: Swift.Bool)
  public var displayString: Swift.String {
    get
  }
  public var isRequired: Swift.Bool {
    get
  }
}
public class QuickPoseDoubleAndStateUnchangedDetector {
  public var similarDuration: Foundation.TimeInterval
  public var leniency: Swift.Double
  public init(similarDuration: Foundation.TimeInterval, leniency: Swift.Double = 0.05)
  public func count(result: (value: Swift.Double, state: Swift.String), timestamp: Foundation.Date = Date(), minValue: Swift.Double? = nil, maxValue: Swift.Double? = nil, onChange: (() -> ()))
  public func reset()
  @objc deinit
}
public class QuickPoseDoubleUnchangedDetector {
  public var similarDuration: Foundation.TimeInterval
  public var leniency: Swift.Double
  public init(similarDuration: Foundation.TimeInterval, leniency: Swift.Double = 0.05)
  public func count(result: Swift.Double, timestamp: Foundation.Date = Date(), minValue: Swift.Double? = nil, maxValue: Swift.Double? = nil, onChange: (() -> ()))
  public func reset()
  @objc deinit
}
extension CoreFoundation.CGPoint : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGPoint {
  public func Yflipped() -> CoreFoundation.CGPoint
}
public protocol QuickPoseCaptureAVAssetOutputSampleBufferDelegate : ObjectiveC.NSObjectProtocol {
  func captureAVOutput(didOutput sampleBuffer: CoreVideo.CVBuffer, timestamp: CoreMedia.CMTime, isFrontCamera: Swift.Bool)
}
extension QuickPoseCore.QuickPose {
  public struct Style : Swift.Hashable {
    public struct ConditionalColor : Swift.Hashable {
      public init(min: Swift.Double?, max: Swift.Double?, color: UIKit.UIColor)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: QuickPoseCore.QuickPose.Style.ConditionalColor, b: QuickPoseCore.QuickPose.Style.ConditionalColor) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(relativeFontSize: Swift.Double = 1, relativeArcSize: Swift.Double = 1, relativeLineWidth: Swift.Double = 1, color: UIKit.UIColor = UIColor.white, conditionalColors: [QuickPoseCore.QuickPose.Style.ConditionalColor]? = nil)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: QuickPoseCore.QuickPose.Style, b: QuickPoseCore.QuickPose.Style) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Feature : Swift.Hashable {
    case showPoints(style: QuickPoseCore.QuickPose.Style = Style())
    case overlay(_: QuickPoseCore.QuickPose.Landmarks.Group, style: QuickPoseCore.QuickPose.Style = Style())
    case measureAngleBody(origin: QuickPoseCore.QuickPose.Landmarks.Body, p1: QuickPoseCore.QuickPose.Landmarks.Body, p2: QuickPoseCore.QuickPose.Landmarks.Body?, clockwiseDirection: Swift.Bool, style: QuickPoseCore.QuickPose.Style = Style())
    case measureAngleFace(origin: QuickPoseCore.QuickPose.Landmarks.Face, p1: QuickPoseCore.QuickPose.Landmarks.Face, clockwiseDirection: Swift.Bool, style: QuickPoseCore.QuickPose.Style = Style())
    case raisedFingers(side: QuickPoseCore.QuickPose.Side? = nil, style: QuickPoseCore.QuickPose.Style = Style(relativeLineWidth: 0.5))
    case thumbsUp(side: QuickPoseCore.QuickPose.Side? = nil, style: QuickPoseCore.QuickPose.Style = Style(relativeLineWidth: 0.5))
    case thumbsUpOrDown(side: QuickPoseCore.QuickPose.Side? = nil, style: QuickPoseCore.QuickPose.Style = Style(relativeLineWidth: 0.5))
    case rangeOfMotion(_: QuickPoseCore.QuickPose.RangeOfMotion, style: QuickPoseCore.QuickPose.Style = Style())
    case fitness(_: QuickPoseCore.QuickPose.FitnessFeature, style: QuickPoseCore.QuickPose.Style = Style())
    public var displayString: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: QuickPoseCore.QuickPose.Feature, rhs: QuickPoseCore.QuickPose.Feature) -> Swift.Bool
    public func restyled(_ newStyle: QuickPoseCore.QuickPose.Style) -> QuickPoseCore.QuickPose.Feature
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Side : Swift.Hashable {
    case left
    case right
    public var displayTitle: Swift.String {
      get
    }
    public static func == (a: QuickPoseCore.QuickPose.Side, b: QuickPoseCore.QuickPose.Side) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum RangeOfMotion : Swift.Hashable {
    case neck(clockwiseDirection: Swift.Bool)
    case shoulder(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    case elbow(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    case hip(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    case back(clockwiseDirection: Swift.Bool)
    case knee(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    case ankle(side: QuickPoseCore.QuickPose.Side, clockwiseDirection: Swift.Bool)
    public var shortDisplayTitle: Swift.String {
      get
    }
    public var longDisplayTitle: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: QuickPoseCore.QuickPose.RangeOfMotion, b: QuickPoseCore.QuickPose.RangeOfMotion) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum FitnessFeature : Swift.Hashable {
    case squats
    case pushUps
    case jumpingJacks
    case sumoSquats
    case leftLegLunges
    case rightLegLunges
    case sitUps
    case cobraWings
    case plank
    public var requiredVisibility: [QuickPoseCore.QuickPose.Landmarks.Group] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var displayTitle: Swift.String {
      get
    }
    public var measureFunction: ([[Swift.Double]]) -> Swift.Double {
      get
    }
    public var checksFunction: [(Swift.Double, [[Swift.Double]], [[Swift.Double]]) -> QuickPoseCore.PoseFeedback?] {
      get
    }
    public static func == (a: QuickPoseCore.QuickPose.FitnessFeature, b: QuickPoseCore.QuickPose.FitnessFeature) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension QuickPoseCore.QuickPose {
  public struct FeatureResult : Swift.Equatable {
    public let value: Swift.Double
    public let stringValue: Swift.String
    public static func == (a: QuickPoseCore.QuickPose.FeatureResult, b: QuickPoseCore.QuickPose.FeatureResult) -> Swift.Bool
  }
  public enum Status {
    case success(fps: Swift.Int, lag: Swift.Double)
    case noPersonFound
    case sdkValidationError
  }
}
@objc public class QuickPose : ObjectiveC.NSObject, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, QuickPoseCore.QuickPoseCaptureAVAssetOutputSampleBufferDelegate {
  public init(sdkKey: Swift.String)
  public struct ModelConfig {
    public enum ModelComplexity {
      case light
      case good
      case heavy
      public static func == (a: QuickPoseCore.QuickPose.ModelConfig.ModelComplexity, b: QuickPoseCore.QuickPose.ModelConfig.ModelComplexity) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(detailedFaceTracking: Swift.Bool = true, detailedHandTracking: Swift.Bool = true, modelComplexity: QuickPoseCore.QuickPose.ModelConfig.ModelComplexity = .good)
  }
  public func start(features: [QuickPoseCore.QuickPose.Feature], modelConfig: QuickPoseCore.QuickPose.ModelConfig = ModelConfig(), onStart: (() -> ())? = nil, onFrame: @escaping ((QuickPoseCore.QuickPose.Status, UIKit.UIImage?, [QuickPoseCore.QuickPose.Feature : QuickPoseCore.QuickPose.FeatureResult], [QuickPoseCore.QuickPose.Feature : QuickPoseCore.PoseFeedback], QuickPoseCore.QuickPose.Landmarks?) -> ()))
  public func disableLogging()
  public func enableLogging()
  public func update(features: [QuickPoseCore.QuickPose.Feature], modelConfig: QuickPoseCore.QuickPose.ModelConfig? = nil)
  public func stop()
  public func libVersion() -> Swift.String
  public func quickPoseVersion() -> Swift.String
  public func captureAVOutput(didOutput sampleBuffer: CoreVideo.CVBuffer, timestamp: CoreMedia.CMTime, isFrontCamera: Swift.Bool)
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @objc deinit
}
extension QuickPoseCore.QuickPose {
  public struct Landmarks {
    public let poseLandmarks: [[Swift.Double]]
    public let faceLandmarks: [[Swift.Double]]
    public let leftHandLandmarks: [[Swift.Double]]
    public let rightHandLandmarks: [[Swift.Double]]
    public enum Group : Swift.String {
      case none
      case wholeBody
      case upperBody
      case straightArmsUpperBody
      case toWristsUpperBody
      case shoulders
      case userLeftArm
      case userLeftArmToWrist
      case userLeftArmNoElbow
      case userStraightLeftArm
      case userLeftHand
      case userRightArm
      case userRightArmToWrist
      case userRightArmNoElbow
      case userStraightRightArm
      case userRightHand
      case lowerBody
      case hips
      case elbows
      case knees
      case legs
      case userRightLeg
      case userLeftLeg
      public static func commonLimbs() -> [QuickPoseCore.QuickPose.Landmarks.Group]
      public static func allLimbs() -> [QuickPoseCore.QuickPose.Landmarks.Group]
      public func toSubgroups() -> [QuickPoseCore.QuickPose.Landmarks.Group]
      public func toJoints() -> [[QuickPoseCore.QuickPose.Landmarks.Body]]
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Face : Swift.Int {
      case userFaceForehead
      case userFaceChin
      case userFaceLeftEar
      case userFaceRightEar
      case userFaceNose
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Face?
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Body : Swift.Int {
      case nose
      case userLeftEyeInner
      case userLeftEye
      case userLeftEyeOuter
      case userRightEyeInner
      case userRightEye
      case userRightEyeOuter
      case userLeftEar
      case userRightEar
      case mouthUserRight
      case mouthUserLeft
      case userLeftShoulder
      case userRightShoulder
      case userLeftElbow
      case userRightElbow
      case userLeftWrist
      case userRightWrist
      case userLeftPinky
      case userRightPinky
      case userLeftIndex
      case userRightIndex
      case userLeftThumb
      case userRightThumb
      case userLeftHip
      case userRightHip
      case userLeftKnee
      case userRightKnee
      case userLeftAnkle
      case userRightAnkle
      case userLeftHeel
      case userRightHeel
      case userLeftFootIndex
      case userRightFootIndex
      case userMidHip
      case userMidShoulder
      public static func toHumanReadableString(_ body: QuickPoseCore.QuickPose.Landmarks.Body) -> Swift.String?
      public static func toString(_ body: QuickPoseCore.QuickPose.Landmarks.Body) -> Swift.String?
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Body?
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum HandGroup : Swift.Int {
      case none
      case hand
      case fingers
      public static func parse(_ rawValue: Swift.String?) -> QuickPoseCore.QuickPose.Landmarks.HandGroup
      public func toJoints() -> [[QuickPoseCore.QuickPose.Landmarks.Hand]]
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Hand : Swift.Int {
      case WRIST
      case THUMB_CMC
      case THUMB_MCP
      case THUMB_IP
      case THUMB_TIP
      case INDEX_FINGER_MCP
      case INDEX_FINGER_PIP
      case INDEX_FINGER_DIP
      case INDEX_FINGER_TIP
      case MIDDLE_FINGER_MCP
      case MIDDLE_FINGER_PIP
      case MIDDLE_FINGER_DIP
      case MIDDLE_FINGER_TIP
      case RING_FINGER_MCP
      case RING_FINGER_PIP
      case RING_FINGER_DIP
      case RING_FINGER_TIP
      case PINKY_FINGER_MCP
      case PINKY_FINGER_PIP
      case PINKY_FINGER_DIP
      case PINKY_FINGER_TIP
      public static func parse(rawValue: Swift.String) -> QuickPoseCore.QuickPose.Landmarks.Hand?
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
  }
}
public class QuickPoseThresholdTimer {
  final public let threshold: Swift.Double
  final public let windowSize: Swift.Int
  public var measures: [Swift.Double]
  public init(threshold: Swift.Double = 0.6, windowSize: Swift.Int = 10)
  public func update(measure: Swift.Double) -> Swift.Bool
  public func timeInPosition() -> Foundation.TimeInterval
  public func stop()
  @objc deinit
}
extension QuickPoseCore.BodyPose : Swift.Equatable {}
extension QuickPoseCore.BodyPose : Swift.Hashable {}
extension QuickPoseCore.BodyFeedback : Swift.Equatable {}
extension QuickPoseCore.BodyFeedback : Swift.Hashable {}
extension QuickPoseCore.BodyFeedback : Swift.RawRepresentable {}
extension QuickPoseCore.PoseFeedback.ActionChange : Swift.Equatable {}
extension QuickPoseCore.PoseFeedback.ActionChange : Swift.Hashable {}
extension QuickPoseCore.PoseFeedback.ActionChange : Swift.RawRepresentable {}
extension QuickPoseCore.PoseFeedback.DirectionChange : Swift.Equatable {}
extension QuickPoseCore.PoseFeedback.DirectionChange : Swift.Hashable {}
extension QuickPoseCore.PoseFeedback.DirectionChange : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.ModelConfig.ModelComplexity : Swift.Equatable {}
extension QuickPoseCore.QuickPose.ModelConfig.ModelComplexity : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Group : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Group : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Group : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Face : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.Body : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Body : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Body : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.HandGroup : Swift.RawRepresentable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.Equatable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.Hashable {}
extension QuickPoseCore.QuickPose.Landmarks.Hand : Swift.RawRepresentable {}
